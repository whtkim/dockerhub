# 1. 性能优化配置
# 直接从内核空间发送文件，提高文件传输效率
sendfile on;

# 优化数据包发送（sendfile启用时，等待数据包填满再发送）
tcp_nopush on;

# 减少延迟，提高实时性
tcp_nodelay on;

# 空闲连接超时时间
keepalive_timeout 30;

# 单连接最大请求数
keepalive_requests 1000;

# 客户端超时重置连接
reset_timedout_connection on;

# 读取客户端请求体超时时间（未发送请求体数据则关闭连接）
client_body_timeout 10;

# 读取客户端请求头超时时间（未发送完整请求头则关闭连接）
client_header_timeout 10;


###############################################################


# 2. 缓冲区优化
# 客户端请求体缓冲区大小
client_body_buffer_size 16k;

# 客户端请求头缓冲区大小
client_header_buffer_size 2k;

# 客户端请求体最大大小，允许上传10M文件
client_max_body_size 10m;

# 设置存储超大请求头缓冲区数量和大小
large_client_header_buffers 4 16k;

# 设置输出缓冲区数量和大小
output_buffers 4 256k;

# 设置传输响应数据的最小值（1460字节 = MTU大小）
postpone_output 1460;


###############################################################


# 3. 文件访问优化
# 设置文件缓存，max=条目数，inactive=有效时间
open_file_cache max=10000 inactive=20s;

# 设置文件缓存有效时间
open_file_cache_valid 30s;

# 设置文件缓存最小使用次数
open_file_cache_min_uses 2;

# 设置文件缓存错误日志
open_file_cache_errors on;

